name: "release-plz"
author: "Marco Ieni"
description: "Update version and changelog based on semantic versioning and conventional commits"
inputs:
  command:
    description: "The release-plz command to run. Accepted values: `release-pr`, `release`. If unspecified, this action runs both these commands."
    required: false
  registry:
    description: "Registry where the packages are stored. The registry name needs to be present in the Cargo config. If unspecified, crates.io is used."
    required: false
  config:
    description: "Config file location. If not present, the default 'release-plz.toml' is used."
    required: false
  manifest_path:
    description:
      "Path to the Cargo.toml of the project you want to update. If not provided, release-plz will use the Cargo.toml of the
      root directory. Both Cargo workspaces and single packages are supported."
    required: false
  project_manifest:
    description: "Deprecated. Use `manifest_path` instead."
    required: false
  version:
    description: "Release-plz version to use. (Default: `0.3`)."
    default: "0.3"
    required: false
  token:
    description: "Token used to publish to the cargo registry"
    required: false
  tool-repository:
    description: "Build custom release-plz for development or testing. Specifies the repository url passed to git clone."
    required: false
  tool-rev:
    description: "Build custom release-plz for development or testing. Specifies the revision passed to git checkout."
    required: false
outputs:
  # Useful for when https://github.com/MarcoIeni/release-plz/issues/1029 is implemented.
  # For now, it just returns an array with `pr` in it.
  prs:
    description: "The release PRs opened by release-plz. (Not useful for now. Use `pr` instead)"
    value: ${{ steps.release-plz.outputs.prs }}
  pr:
    description: "The release PR opened by release-plz."
    value: ${{ steps.release-plz.outputs.pr }}
  releases:
    description: "The JSON output of the `release` command."
    value: ${{ steps.release-plz.outputs.releases }}
  prs_created:
    description: "Whether release-plz created any release PR."
    value: ${{ steps.release-plz.outputs.prs_created }}
  releases_created:
    description: "Whether release-plz released any package."
    value: ${{ steps.release-plz.outputs.releases_created }}
branding:
  icon: "zap"
  color: "yellow"
runs:
  using: "composite"
  steps:
    - name: Install cargo semver-checks
      uses: taiki-e/install-action@v2
      with:
        tool: cargo-semver-checks@0.31
    - name: Install release-plz
      if: ${{ ! inputs.tool-repository }}
      uses: taiki-e/install-action@v2
      with:
        tool: release-plz@${{ inputs.version }}
    - name: Build custom release-plz
      if: ${{ inputs.tool-repository }}
      shell: bash
      run: |
        git clone "${{ inputs.tool-repository }}" ../release-plz
        cd ../release-plz
        if [[ -n "${{ inputs.tool-rev }}" ]]
        then
            git checkout "${{ inputs.tool-rev }}"
        fi
        cargo install --path crates/release_plz
    - name: Configure git user from GitHub token
      uses: MarcoIeni/git-config@v0.1
    - name: Run release-plz
      id: release-plz
      shell: bash
      run: |
        if [[ -n "${{ inputs.config }}" ]]
        then
            echo "using config from '${{ inputs.config }}'"
            CONFIG_PATH="--config ${{ inputs.config }}"
        else
            CONFIG_PATH=""
        fi

        if [[ -n "${{ inputs.token }}" ]]
        then
            echo "using custom registry token'"
            TOKEN="--token ${{ inputs.token }}"
        else
            TOKEN=""
        fi

        if [[ -n "${{ inputs.registry }}" ]]
        then
            echo "using registry '${{ inputs.registry }}'"
            ALT_REGISTRY="--registry ${{ inputs.registry }}"
        else
            ALT_REGISTRY=""
        fi

        if [[ -n "${{ inputs.manifest_path }}" ]]
        then
            echo "using manifest path '${{ inputs.manifest_path }}'"
            MANIFEST_PATH="--manifest-path ${{ inputs.manifest_path }}"
        elif [[ -n "${{ inputs.project_manifest }}" ]]
        then
            echo "using manifest path '${{ inputs.project_manifest }}'"
            MANIFEST_PATH="--project-manifest ${{ inputs.project_manifest }}"
        else
            MANIFEST_PATH=""
        fi

        if [[ -z "${{ inputs.command }}" || "${{ inputs.command }}" == "release-pr" ]]
        then
            echo "-- Running release-plz release-pr --"
            release_pr_output=$(release-plz release-pr\
                --git-token ${GITHUB_TOKEN}\
                --repo-url https://github.com/${GITHUB_REPOSITORY}\
                ${CONFIG_PATH}\
                ${ALT_REGISTRY}\
                ${MANIFEST_PATH}\
                -o json)
            echo "release_pr_output: $release_pr_output"
            prs=$(echo $release_pr_output | jq -c .prs)
            echo "prs=$prs" >> "$GITHUB_OUTPUT"
            prs_length=$(echo "$prs" | jq 'length')
            if [ "$prs_length" != "0" ]; then
                prs_created=true
                first_pr=$(echo $prs | jq -c .[0])
            else
                prs_created=false
                first_pr="{}"
            fi
            echo "pr=$first_pr" >> "$GITHUB_OUTPUT"
            echo "prs_created=$prs_created" >> "$GITHUB_OUTPUT"
        fi

        if [[ -z "${{ inputs.command }}" || "${{ inputs.command }}" == "release" ]]
        then
            echo "-- Running release-plz release --"
            release_output=$(release-plz release\
                --git-token ${GITHUB_TOKEN}\
                ${CONFIG_PATH}\
                ${ALT_REGISTRY}\
                ${MANIFEST_PATH}\
                ${TOKEN}\
                -o json)
            echo "release_output: $release_output"
            releases=$(echo $release_output | jq -c .releases)
            echo "releases=$releases" >> "$GITHUB_OUTPUT"
            releases_length=$(echo "$releases" | jq 'length')
            if [ "$releases_length" != "0" ]; then
                releases_created=true
            else
                releases_created=false
            fi
            echo "releases_created=$releases_created" >> "$GITHUB_OUTPUT"
        fi
