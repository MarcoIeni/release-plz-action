name: "release-plz"
author: "Marco Ieni"
description: "Update version and changelog based on semantic versioning and conventional commits"
inputs:
  command:
    description: "The release-plz command to run. Accepted values: `release-pr`, `release`. If unspecified, this action runs both these commands."
    required: false
  registry:
    description: "Registry where the packages are stored. The registry name needs to be present in the Cargo config. If unspecified, crates.io is used."
    required: false
  config:
    description: "Config file location. If not present, the default 'release-plz.toml' is used."
    required: false
  project_manifest:
    description: "Path to the Cargo.toml of the project you want to update. If not provided, release-plz will use the Cargo.toml of the
            root directory. Both Cargo workspaces and single packages are supported."
    required: false
  version:
    description: "Release-plz version to use. It must be an existing git tag name. For example `release-plz-v0.2.45`. (Default: `latest`)."
    default: "release-plz-v0.3.38"
    required: false
branding:
  icon: "zap"
  color: "yellow"
runs:
  using: "composite"
  steps:
    - name: Install cargo-semver-checks
      uses: jaxxstorm/action-install-gh-release@v1.10.0
      with:
        repo: obi1kenobi/cargo-semver-checks
        tag: v0.27.0
        cache: enable
    - name: Install release-plz
      uses: jaxxstorm/action-install-gh-release@v1.10.0
      with:
        repo: MarcoIeni/release-plz
        tag: ${{ inputs.version }}
        cache: enable
    - id: commit-author
      name: Determine Git user info from GitHub token
      shell: bash
      run: |
        # The environment variable GITHUB_TOKEN is read by the `gh` cli
        VIEWER_JSON=$(gh api graphql -f query='query { viewer { name login databaseId }}' --jq '.data.viewer')
        VIEWER_NAME=$(jq --raw-output '.name | values' <<< "${VIEWER_JSON}")
        VIEWER_LOGIN=$(jq --raw-output '.login' <<< "${VIEWER_JSON}")
        VIEWER_DATABASE_ID=$(jq --raw-output '.databaseId' <<< "${VIEWER_JSON}")

        USER_NAME="${VIEWER_NAME:-${VIEWER_LOGIN}}"
        USER_EMAIL="${VIEWER_DATABASE_ID}+${VIEWER_LOGIN}@users.noreply.github.com"

        echo "name=${USER_NAME}" >> "${GITHUB_OUTPUT}"
        echo "email=${USER_EMAIL}" >> "${GITHUB_OUTPUT}"
    - name: Run release-plz
      shell: bash
      run: |
        if [[ -n "${{ inputs.config }}" ]]
        then
            echo "using config from '${{ inputs.config }}'"
            CONFIG_PATH="--config ${{ inputs.config }}"
        else
            CONFIG_PATH=""
        fi
        if [[ -n "${{ inputs.registry }}" ]]
        then
            echo "using registry '${{ inputs.registry }}'"
            ALT_REGISTRY="--registry ${{ inputs.registry }}"
        else
            ALT_REGISTRY=""
        fi

        if [[ -n "${{ inputs.project_manifest }}" ]]
        then
            echo "using project manifest '${{ inputs.project_manifest }}'"
            PROJECT_MANIFEST="--project-manifest ${{ inputs.project_manifest }}"
        else
            PROJECT_MANIFEST=""
        fi

        git config --global user.email "${{ steps.commit-author.outputs.email }}"
        git config --global user.name "${{ steps.commit-author.outputs.name }}"

        if [[ -z "${{ inputs.command }}" || "${{ inputs.command }}" == "release-pr" ]]
        then
            echo "-- Running release-plz release-pr --"
            release-plz release-pr\
                --git-token ${GITHUB_TOKEN}\
                --repo-url https://github.com/${GITHUB_REPOSITORY}\
                ${CONFIG_PATH}\
                ${ALT_REGISTRY}\
                ${PROJECT_MANIFEST}
        fi

        if [[ -z "${{ inputs.command }}" || "${{ inputs.command }}" == "release" ]]
        then
            if [ -z "${CARGO_REGISTRY_TOKEN-unset}" ]
            then
                echo "\$CARGO_REGISTRY_TOKEN environment variable is set to empty string. Please set your token in GitHub actions secrets. Docs: https://marcoieni.github.io/release-plz/github/index.html"
                exit 1
            fi
            echo "-- Running release-plz release --"
            release-plz release\
                --git-token ${GITHUB_TOKEN}\
                ${CONFIG_PATH}\
                ${ALT_REGISTRY}\
                ${PROJECT_MANIFEST}
        fi
